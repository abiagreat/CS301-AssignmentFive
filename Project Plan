Group 3: Abia Khan and Mario Salinas
NetID: ac6212 and ry7931 
CS 301-03 
10/10/23


Assignment 5 Project Plan

Test cases: 10 
We tested the input and output file. We tested the stack 


Expectations: 
We expect to have the program to open a file and read its contents into a stack of characters.
The program will pop the characters from the stack and 
save them in a second text file. The order of the characters will be saved in the second file 
and will reverse their order. 
We expect that each function will run successfully and that each test will pass. 


Class names: stringStack, dynamicStack, intStack

Functions: while, if-else statement

Logic we tried to implement:

#include <iostream>
#include <fstream>
#include <string>

using namespace std;

#include "DynamicStack.h"   // Include the header file for DynamicStack
#include "DynamicStack.cpp" // Include the implementation file for DynamicStack

int main() {
    // Declare variables for file names and streams
    string inputFileName, outputFileName;
    ifstream inputFile;  // Input file stream
    ofstream outputFile; // Output file stream
    string command;     // Variable to store commands read from the file

    // Create instances of DynamicStack for integers, strings, and characters
    DynamicStack<int> intStack;
    DynamicStack<string> stringStack;
    DynamicStack<string> charStack;

    // Set input and output file names
    inputFileName = "input.txt";
    outputFileName = "output.txt";

    // Open input file
    inputFile.open(inputFileName.c_str());

    // Open output file
    outputFile.open(outputFileName.c_str());

    // Check if input file is accessible
    if (!inputFile.good()) {
        cout << "I/O error. Can't find the input file! \n";
        exit(2); // Exit the program if input file is not accessible
    }

    int inputNum;

    // Read integers from the input file and push them onto the intStack
    while (inputFile >> inputNum) {
        intStack.push(inputNum);
    }

    // Display whether intStack is empty in the console and write it to the output file
    std::cout << "Int Stack Is Empty: " << intStack.isEmpty() << std::endl;
    outputFile << "Int Stack is Empty: " << intStack.isEmpty() << endl;

    // Push strings onto the stringStack
    stringStack.push("Hello");
    stringStack.push("World");

    // Display whether stringStack is empty in the console and write it to the output file
    std::cout << "String Stack Is Empty: " << stringStack.isEmpty() << std::endl;
    cout << "String stack is empty: " << stringStack.isEmpty() << endl;

    // Pop and display integers from the intStack until it's empty, writing to the output file as well
    while (!intStack.isEmpty()) {
        std::cout << "Popped: " << intStack.top->data << std::endl;
        outputFile << "Popped: " << intStack.top->data << endl;
        intStack.pop();
    }

    // Pop and display strings from the stringStack until it's empty, writing to the output file as well
    while (!stringStack.isEmpty()) {
        std::cout << "Popped: " << stringStack.top->data << std::endl;
        outputFile << "Popped: " << stringStack.top->data << endl;
        stringStack.pop();
    }

    // Display whether intStack and stringStack are empty after popping all elements
    std::cout << "Int Stack Is Empty: " << intStack.isEmpty() << std::endl;
    std::cout << "String Stack Is Empty: " << stringStack.isEmpty() << std::endl;

    // Close input and output files
    inputFile.close();
    outputFile.close();

    return 0; // Indicate successful execution of the program
}

